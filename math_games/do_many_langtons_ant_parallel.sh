#! /bin/bash


# python create random R and L moves!
# l=[''.join(l) for l in np.array(['R', 'L'])[(lambda x: np.hstack(((x[:, :1]^x[:, :1])+1, x[:, 1:])))(np.cumsum(np.random.randint(0, 2, (12, 8)), axis=1)%2)].tolist()]
# print('\n'.join([" ".join(["'"+v.rstrip('L')+"'" for v in l]) for l in np.array(l).reshape((-1, 4)).tolist()]))

MAX_ITERS=10000000
# ARR_MOVES=(
# 'LR' 'LRR' 'LRRR' 'LRRRR'
# 'LLR' 'LLRR' 'LLRRR' 'LLRRRR'

# 'LLLLR' 'LRLLLR' 'LLRLRLRR' 'LRRLLRR'
# 'LRRRRLRR' 'LLLLR' 'LLLRLRRR' 'LRRRRLR'
# 'LLRRLLRR' 'LRLLRLRR' 'LLRLLRLR' 'LLRR'
# 'LRRRLLR' 'LRRRRRLR' 'LLLLLLLR' 'LRLLRLR'
# 'LRR' 'LRRLRR' 'LLRLRRR' 'LLLLLLR'
# 'LRLRRLRR' 'LLRLR' 'LRRRR' 'LRRRLLR'
# 'LLRRLRR' 'LRRLRR' 'LRLLRRLR' 'LRRLRLRR'
# 'LRLLRRR' 'LRLRRRLR' 'LRLRRRRR' 'LLLRRRRR'
# 'LRRRRLR' 'LLRLRLR' 'LRRRLRR' 'LRRRRR'
# 'LLLLRLLR' 'LRRRRLRR' 'LLRRLLRR' 'LRLLLLR'

# 'LLRLLRLRR' 'LLRRLLLRRR' 'LRRLRLLLR' 'LLRRLLRRR'
# 'LRRRLRRRR' 'LRLRLLRRLR' 'LLRRRRRLLR' 'LRRLLLLR'
# 'LRLRLLLLRR' 'LRRRRLLRRR' 'LLLRRRRRLR' 'LLRLRLLRLR'
# 'LLLLLLLLR' 'LRRRLRLLLR' 'LLRLLRRR' 'LLLLLLLLLR'
# 'LLRLLRRLR' 'LRRLRLRLLR' 'LRRLRRR' 'LRRRRRRR'
# 'LLLLLLRLLR' 'LLRLRLRLR' 'LLRLRRRLRR' 'LRRRLLLRRR'
# 'LLRLRRLRLR' 'LLLRR' 'LLRRLRRRR' 'LRRRRRLLLR'
# 'LLLLLLR' 'LLLLLLRLLR' 'LRRRR' 'LLRLR'
# 'LLRRRRRRR' 'LRLLLRLLRR' 'LRRLLRR' 'LLLLRLRRRR'
# 'LRLLRRRRR' 'LLRRRRRLRR' 'LRLRLLLLRR' 'LLLRLLLLLR'
# 'LLLLLRRLR' 'LRLLRRLRLR' 'LRLLRRLRLR' 'LRRRRRRRLR'
# 'LLRLLRRRR' 'LRLRLLRRR' 'LRRLRLRRLR' 'LRRLRRR'
# 'LLRRLRLLLR' 'LRRRRRRRRR' 'LLRRRRRLR' 'LRLLRLLR'
# 'LLLRRLRRR' 'LLRRR' 'LRLRRLLRRR' 'LRLLLLRLLR'
# 'LLRRRRR' 'LLRLRR' 'LRRRLLLRRR' 'LLLRRLLRR'
# 'LLLLLRRR' 'LLRLLLLLRR' 'LRRRRRLLR' 'LRLLRLRRRR'
# 'LRLRRRLLRR' 'LRRRRLLR' 'LRRLLRRLRR' 'LRRRLRLLR'
# 'LLLLLLLRLR' 'LLRLRRRLRR' 'LRLRLRRLRR' 'LLRLRRRRLR'
# 'LLRLRLLRRR' 'LRRRRRRLR' 'LLLRRLLLRR' 'LRLRRLRLRR'
# 'LLRRLLLLRR' 'LRRRLRLLR' 'LLRRLRLRRR' 'LLRRRRRRR'
# 'LRLRLLLRR' 'LRLLRRLRRR' 'LRRLLRRLR' 'LRLLLLLLRR'
# 'LRRRRRRR' 'LRRRR' 'LRLLRRRRR' 'LLLRRR'
# 'LLRRRRRR' 'LRRRRRRLRR' 'LRLRRRLLLR' 'LLRRLLR'
# 'LLRRLRRRLR' 'LLRLRLR' 'LRRRRLRRRR' 'LLLLLLRLLR'
# 'LLRLLRLLRR' 'LLRLRRLR' 'LLR' 'LLRRLRRRRR'

# 'LLRRRLRRRLR' 'LRLLRLRLLRLR' 'LRLRLLLLRRRR' 'LLRLRLRLLR'
# 'LRLLLLLLLRRR' 'LRRRLRLR' 'LRLRLLRRLRR' 'LRLLLLRLLLR'
# 'LLRLRRLRLRRR' 'LRLLRLRLLLRR' 'LRLRRRRRRLRR' 'LLRRLLLLR'
# 'LRRRLRRRRRR' 'LLRRRLRRLRLR' 'LRRRRRLRLRRR' 'LLRRLLLLRLR'
# 'LLRLRLLR' 'LRRLRLRR' 'LLRRLRRRLRRR' 'LRRRLLLRLRR'
# 'LRRLRRRLLLRR' 'LLRLRLLRRLR' 'LLRRRRLRLLLR' 'LRLLLRRRLLR'
# 'LLLRLRLR' 'LLRLRLLLRRLR' 'LRRRLRRRLRLR' 'LRLLRLRLRLLR'
# 'LRLLRLLRLLR' 'LRLLLLLLLRLR' 'LLLLLLRLLLR' 'LRRLLRRRRRRR'
# 'LLLRRLLRLRRR' 'LLRLLRRLLLLR' 'LLLLLRRRRRRR' 'LLLRLRRLRR'
# 'LLLRRLRLRLLR' 'LLRLRRRLRRR' 'LRRLRLRLLLR' 'LRLRRLLRLLRR'
# 'LRLLRLLLLRR' 'LRRLRRRLLLR' 'LRRLRRRRR' 'LRRRRLLRRLRR'
# 'LRLLRRLRLLR' 'LRRLRLLLRLRR' 'LLRLLLRRRLRR' 'LLRLLLLLR'
# 'LLLRLRLLRLLR' 'LRLRRRLLLRR' 'LRLRLLRLRRR' 'LRRLRLLLLRR'
# 'LRLRRLLLLLLR' 'LRRLRLRRRRR' 'LLRRLRLRLLR' 'LRRRLRRLLR'
# 'LLRLLLLLLRLR' 'LLRRLLRLRRLR' 'LRLLRRLLLR' 'LLLLRRRLLLR'
# 'LLRRLLRLR' 'LLLRLRLRLLLR' 'LLLLLLLRRRLR' 'LRLRLRRLRRLR'
# 'LRLLRRLLR' 'LRRLRRLLLRRR' 'LRRLRRLRRLLR' 'LRLLRLLRRR'
# 'LRRRRRRRLLLR' 'LRLLLLRRLLRR' 'LLRRRLRRRRRR' 'LLRRRRRRLR'
# 'LRLRLRRLR' 'LRLLLLRRR' 'LRLLLLRLRLLR' 'LRRRLRLLRR'
# 'LRRRRLRLLLLR' 'LLLLLR' 'LLLLRRLRLR' 'LRRRLLLRRLRR'
# 'LLRRLLLRLR' 'LRLRRRRRRLR' 'LLLLRLLLLR' 'LRLLRRLLRRR'
# 'LLLLRRRRRLR' 'LRRLRLLLLLLR' 'LLLRRRRLLRR' 'LRRRLLRRLR'
# 'LRRLRRRRRRR' 'LLLRLRLLRLR' 'LLRRRLRRRLLR' 'LRRRRLLRLRRR'
# 'LRLRRRRRLRLR' 'LRLLRRLLRRRR' 'LRRLRRLLLLR' 'LLRLLLLRLRRR'
# 'LRLLLLLRLLR' 'LLRLRLRRR' 'LRRLLRLLLRRR' 'LRRRRRLLRLR'
# 'LRLLLRRRRLRR' 'LRLRLLLR' 'LLLRLRRR' 'LRLLLLLLR'
# 'LLLLLLRRLLLR' 'LLRRRRLLRRRR' 'LLRLRRRRRRRR' 'LLLRLRRRRRRR'
# 'LLRRRRRLRRLR' 'LLRLRRRRRLR' 'LLLLRLRLRRLR' 'LRLRLLLLRR'
# 'LLLRRLRLRRRR' 'LRRLLLLRRLLR' 'LRLLLRRLRLR' 'LRLLLRRRR'
# 'LRRRLRLRLRR' 'LRLLLRRRLRRR' 'LLRLLRRRRLLR' 'LLLRLRRLRRR'
# 'LLLLLLLLLRRR' 'LRRRLRRLLLR' 'LRRLLLLLLLRR' 'LRRRLLRLLRLR'
# 'LRRRRRLR' 'LLLRLRR' 'LRRLLRLLLLLR' 'LLLRRLRRLRR'
# 'LRLRLRRRLRR' 'LRRRRLLRLLR' 'LRRLLRRRLLLR' 'LRLRLLRRLR'
# 'LLRRRRLRRRR' 'LRLLRRLRLRRR' 'LLRRLRLRLR' 'LLLRLLRRLR'
# 'LLLLRRRLRR' 'LRLRRRLRLRRR' 'LRLLLLLRLLR' 'LLLRRLLRLRLR'
# 'LRLLRRLLRLRR' 'LRRLLRRR' 'LRRRLRLR' 'LLLRRLLLRR'
# 'LLRRLLRRLRLR' 'LRRRLLRLRR' 'LLLRRRLLRR' 'LRLLRLLRLLLR'
# 'LLRLRRLRR' 'LRRRRLLLLR' 'LRLLLLRRRRLR' 'LLLLLLLR'
# 'LLRRRRRR' 'LRRRRLLLRLR' 'LLLLLLLLLRR' 'LRLLRLLRLLRR'
# 'LRRLLLLRLLR' 'LLRRRLLRLRLR' 'LLRRLLLLRLRR' 'LRLRLRLRLR'
# 'LLLLLRLRLRRR' 'LRRRRLLRLLR' 'LLLLLRLRRR' 'LRRRRLLLR'
# 'LRRRLLLRRRLR' 'LLLRRRRLRLLR' 'LRRRLLLRLRRR' 'LRLRLLRLRRR'
# 'LRRLLLLLRLLR' 'LRRLLRRLRRRR' 'LRLLLRRLLLR' 'LRLLLRRLRRRR'
# 'LLLLRRRLRRRR' 'LLRRLLRLLLRR' 'LLLRRLR' 'LLLRLRLLLR'
# 'LRLRRRRRRRRR' 'LLRLRRLLLR' 'LRLLLRRRRLR' 'LRRLRLLRRRRR'
# 'LRLRRLRR' 'LRRRRLLLLRR' 'LLLRRRRRLR' 'LRLRRRRRRRRR'
# 'LRRLRLRRLRR' 'LRLLLLRRLRLR' 'LLLLRRLRLRR' 'LRRRRLRRLR'
# 'LLRRRLRLLRLR' 'LLLRRRRRRLRR' 'LLLRLLLRRLLR' 'LRRRLRRLRR'
# 'LLLRLRLLRLR' 'LRRRRLRLLRLR' 'LLLLRLLRR' 'LLLRRLLRRLLR'
# 'LRRRLLRRRLRR' 'LRRRLLRRLLLR' 'LLLLLRLRLLRR' 'LLRLRLRLRRRR'
# )
ARR_MOVES=(
'LRLRLRR' 'LRLRRLR' 'LRRLRLR' 'LR'
)
# read_string=$(./generate_LR_combinations.py)
# IFS=';' read -ra ARR_MOVES <<< "$read_string"

ARR_LEN=${#ARR_MOVES[@]}
CORE_AMOUNT=4
MAX_ITERATIONS=$(($ARR_LEN - $ARR_LEN % $CORE_AMOUNT))

printf "ARR_LEN: ${ARR_LEN}\n"
# exit

i=0
run_nr=1
while [ $i -lt $MAX_ITERATIONS ]; do
    printf "\nRun Nr. ${run_nr}\n"
    j=0
    while [ $j -lt $CORE_AMOUNT ]; do
        idx=$(($i + $j))
        echo "TEST NR. "${idx}
        echo "elem: "${ARR_MOVES[$idx]}
        ./langtons_ant_multiple_machines.py ${ARR_MOVES[$idx]} $MAX_ITERS > output_nr_${j}.txt &
        j=$(($j+1))
    done
    wait
    i=$(($i + $CORE_AMOUNT))
    run_nr=$(($run_nr + 1))
done

exit

echo "Do part Nr. 1"
./langtons_ant_multiple_machines.py LR $MAX_ITERS > output_nr_1.txt &
./langtons_ant_multiple_machines.py LRR $MAX_ITERS > output_nr_2.txt &
./langtons_ant_multiple_machines.py LRRR $MAX_ITERS > output_nr_3.txt &
./langtons_ant_multiple_machines.py LRRRR $MAX_ITERS > output_nr_4.txt &
wait

# echo "Do part Nr. 2"
# ./langtons_ant_multiple_machines.py LLR 2000000 > output_nr_1.txt &
# ./langtons_ant_multiple_machines.py LLLR 2000000 > output_nr_2.txt &
# ./langtons_ant_multiple_machines.py LLLLR 2000000 > output_nr_3.txt &
# ./langtons_ant_multiple_machines.py LLRR 2000000 > output_nr_4.txt &
# wait
